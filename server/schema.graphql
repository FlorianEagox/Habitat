scalar JSON
scalar BigInt
scalar BoolOrFloat

type User {
	id: ID!
	username: String!
	email: String!
	friends: [User!]
	habits: [Habit!]
	avatar: String
}

enum HabitTypes {
	QUANTITY
	DURATION
	BOOLEAN
}

type Habit {
	id: ID!
	owner: User!
	name: String!
	type: HabitTypes!
	goal: Float
	unit: String
	createdAt: String
	datesCompleted: JSON
}


type Query {
	me: User
	user(id: ID!): User
	users(part: String): [User!]!
	habit(id: ID!): Habit
	habits(owner: ID): [Habit]
	searchUsers(part: String): [User]
}

type Mutation {
	register(username: String!, email: String!, password: String!): User
	login(email: String!, password: String!): String
	addHabit(id: ID, name: String!, type: HabitTypes!, goal: Float, unit: String, datesCompleted: JSON): Habit
	deleteHabit(id: ID): Habit
	completeHabit(habitId: ID!, date: BigInt!, degreeOfCompletion: BoolOrFloat): Habit
	addFriend(friendId: ID!): User
}

